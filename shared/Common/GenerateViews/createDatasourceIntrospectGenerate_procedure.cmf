<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:56a055f1-05be-44e4-b8e2-a3fa6d842fe3 -->
<metadata name="createDatasourceIntrospectGenerate" path="/shared/Common/GenerateViews/createDatasourceIntrospectGenerate" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="destroyDatasource" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="dataSourceFullPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="dataSourceType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="catalogName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="schemaName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="tableNames" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="procedureNames" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="urlIP" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="urlDatabaseName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="urlPort" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="login" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="password" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="generateToFolder" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="generateMode" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="overwrite" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="resourceCaseRule" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="columnCaseRule" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="resourcePrefix" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="resourceSuffix" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="newColumnList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="generateCast" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="generateIndexes" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="success1" direction="OUT" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="createDataSourceResponse" direction="OUT" nullable="true">
      <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
        <schemaDatatype>
          <datatype name="XML" type="TREE" refId="1"></datatype>
        </schemaDatatype>
      </datatype>
    </parameter>
    <parameter name="faultResponse" direction="OUT" nullable="true">
      <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
        <schemaDatatype>
          <datatype name="XML" type="TREE" refId="1"></datatype>
        </schemaDatatype>
      </datatype>
    </parameter>
    <parameter name="errStatus" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="errMessage" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="introspectionResult" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="numResourcesIntrospectAdd" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="numTablesIntrospectAdd" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="tablesIntrospectAdd" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="numResourcesIntrospectSkip" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="numTablesIntrospectSkip" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="tablesIntrospectSkip" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="numTotalViews" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="numTotalColumns" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="MessageValue" type="STRING" maxLength="64000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Common/GenerateViews/helpers/createDatasourceIntrospect" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="destroyDatasource" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="dataSourceFullPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="dataSourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="catalogName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="schemaName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="tableNames" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="procedureNames" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="urlIP" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="urlDatabaseName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="urlPort" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="login" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="password" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createDataSourceResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="2"/>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="errMessage" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="introspectionResult" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="numResourcesIntrospectAdd" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="numTablesIntrospectAdd" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="tablesIntrospectAdd" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="numResourcesIntrospectSkip" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="numTablesIntrospectSkip" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="tablesIntrospectSkip" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Common/GenerateViews/helpers/createSourceViews" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="overwrite" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="derivedFilterPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="excludeDsPathsList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="sourceResource" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="generateToFolder" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="generateMode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="generateViews" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="resourceCaseRule" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="columnCaseRule" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="useAliasRule" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="resourcePrefix" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceSuffix" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="newColumnList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="generateWithSourceColumn" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="generateCast" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="generateIndexes" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="generateUnsupportedColumnType" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="datasourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="projectFolderName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="greatGrandParentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="grandParentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="parentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="containerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="containerType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="logicalColumnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="logicalColumnType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="logicalStatus">
            <datatype type="STRING" maxLength="1024"/>
          </element>
          <element name="containerPath">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="duration">
            <datatype type="INTERVAL_DAY" intervalMode="INTERVAL_HOUR_TO_SECOND" intervalPrecision="2" fractionalSecondPrecision="6"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* createDatasourceIntrospectGenerate:

	This procedure executes all steps required to 
		(1) create a datasource and introspect the tables, 
		(2) generate the source views.

 	Input:
	IN  debug							CHAR(1),		-- Y=debug on.  N=debug off
		 **************************************
		 * createDatasourceIntrospect Variables:
		 **************************************
		IN  destroyDatasource			CHAR(1),		-- Y=destroy datasource if exists,   N=do not destroy if exists
		IN  dataSourceFullPath			VARCHAR(4000),	-- The full DV path to the datasource where it will be created.  ex. &apos;/shared/PWC_template_flipped/04_DataSource/DS_ORDERS&apos;
		IN  dataSourceType 				VARCHAR,		-- The type of data source.  This is very specific.  Hive=&apos;Hive2&apos;.  Postgres=&apos;PostgreSQL 9.1&apos;
		IN  catalogName					VARCHAR,		-- optional (null) - Database catalog Name if applicable
		IN  schemaName					VARCHAR,		-- mandatory.  Database schema name
		IN  tableNames					LONGVARCHAR,	-- optional.  NULL=no specified table list OR one or more comma separated tables to introspect.  When NULL, all tables for the schema are introspected.
		IN  procedureNames				LONGVARCHAR,	-- NULL=no specified procedure list OR 1 or more comma separated procedures to introspect.  When NULL, all procedures are introspected.
		IN  urlIP						VARCHAR,		-- This is the datasource hostname or ip address.  ex. &apos;localhost&apos;
		IN  urlDatabaseName				VARCHAR,		-- This is the datasource database name.  ex. &apos;orders&apos;
		IN  urlPort						INTEGER,		-- This is the datasource port number.  ex. 9808
		IN  login						VARCHAR,		-- This is the datasource login.  ex. &apos;tutorial&apos;
		IN  password					VARCHAR,		-- This is the datasource password.  ex. &apos;Encrypted:ENC(iCJKSlfNUeHFVHAVtShr7A==$PLtM6oLQLR3smjq4jn1hJg==)&apos;

		 **************************************
		 * createSourceViews Variables:
		 **************************************
		IN generateToFolder				LONGVARCHAR,
			-- This is the full path to the folder in which to generate the views
			-- This is only required if option 1: sourceResource is provided.
			-- ex. &apos;/shared/PWC_template_flipped/03_SourceViewLayer/031_svInternal/tutorial&apos;
		IN generateMode					CHAR(1),		-- Default this to G
			-- Determines whether to retrieve names from the Common_Model_v2_file[1-3].xls spreadsheets or generate them and
			--   is only meaninfful when generateLogicalNames=1
			-- G=Generate the resource names 
			--   use &apos;G&apos; in conjunctionwith layerType=&apos;PM&apos; to generate the physical metadata names to the spreadsheet.
			--   This would be the strategy for initializing the Common_Model_v2_file[1-3].xls spreadsheet.  
			--   It is often useful to set the caseRule parameter to establish the type of logical names that you want to start with.
			-- R=Retrieve the resource name from a spreadsheet. (resources include PATH names, VIEW names AND COLUMN names)
			--   use &apos;R&apos; in conjunction with layerType=&apos;FV&apos;	 
		IN overwrite				INTEGER,	
			-- allows user to decide whether they want to overwrite an existing view or not.
			-- 0=&quot;FAIL_IF_EXISTS&quot;=do not overwrite the resource.  If the resource exists, raise an exception.
			-- 1=&quot;SKIP_IF_EXISTS&quot;=skip the resource if it exists and continue processing
			-- 2 (default)=&quot;OVERWRITE_IF_EXISTS&quot;=do overwrite the resource if it exists.
		IN resourceCaseRule				CHAR(1), -- (used when generateMode=&apos;G&apos;) 
			--  TABLES only.  This resourceCaseRule is only used for tables.
			--	 Assumption:  The original table name has to have separators (_) for this to work properly.
			--			     If the original word has no separators then the case rule gets applied to the single word
			-- 	j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
			-- 	C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
			-- 	T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
			-- 	U=UPPER_CASE - All word parts are UPPER case with separtors retained
			-- 	l=lower_case - All word parts are lower case with separators retained
			-- 	O=Original_case - The word is not changed at all -- just pass it through as is
		IN columnCaseRule				CHAR(1), -- (used when generateMode=&apos;G&apos;) 
			--  COLUMNS only.  This caseRule is only used for columns.
			--	 Assumption:  The original column name has to have separators (_) for this to work properly.
			--			     If the original word has no separators then the case rule gets applied to the single word
			--	j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
			--	C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
			--	T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
			--	U=UPPER_CASE - All word parts are UPPER case with separtors retained
			--	l=lower_case - All word parts are lower case with separators retained
			--	O=Original_case - The word is not changed at all -- just pass it through as is
		IN resourcePrefix 				VARCHAR, --(used when generateMode=&apos;G&apos;)
			--  Any set of characters used to prefix a table or procedure name.  Include underscores with the suffix if applicable.
			--	Example: V_ MY_TABLE or V_MY_TABLE 	
		IN resourceSuffix 				VARCHAR, --(used when generateMode=&apos;G&apos;)
			--  Any set of characters used to suffix a table or procedure name.  Include underscores with the suffix if applicable.
			--	Example: _APP MY_TABLE or MY_TABLE_APP 	
		IN newColumnList				LONGVARCHAR, --(used when generateMode=&apos;G&apos;)
			-- A formatted list of new columns to add to the end of the view.  The column will not be added if it already exists.
			-- The format is as follows:  column1&amp;&amp;type1&amp;&amp;value1//column2&amp;&amp;type2&amp;&amp;value2//column3&amp;&amp;type3&amp;&amp;value3
		IN generateCast 				SMALLINT,		-- This parameter allows the user to control whether to generate the cast statement around the generated
			--	   column or not.  It uses the column type from the source view.
			--	0=Do not generate CAST statement.  Pass through column as is.  Default behavior.
			-- 	1=Generate the CAST statement around the column
			--	2-Generate the CAST statement around the non-index columns only (No CAST on index columns)
			--	3-Generate the CAST statement around the non-index columns only and generate a &quot;display&quot; CAST column for each index column.  (No CAST o nindex columns)
			--	4-Generate the CAST statement around the non-index columns and non-primary key index columns only (No CAST on primary key index columns)
			--	5-Generate the CAST statement around the non-index columns and non-primary key index columns only and generate a &quot;display&quot; CAST column for each primary key index column.  (No CAST on primary key index columns)
		IN generateIndexes 				SMALLINT,		--	generateIndexes - This parameter allows the user to control whether to generate indexes on the target views as derived from the underlying resources
			--	0=[default] Do not generate indexes
			-- 	1=Generate indexes

	Output:
		-- createDatasourceIntrospect Output Variables:
		OUT success1						BIT,			-- 0=fail, 1=success.
		OUT createDataSourceResponse		XML,			-- How the datasource was configured.
		OUT faultResponse					XML,			-- If not null then there was an error.
		OUT errStatus 						VARCHAR,		-- SUCCESS OR FAIL
		OUT errMessage 						LONGVARCHAR,	-- Error message if errStatus=FAIL
		OUT introspectionResult 			LONGVARCHAR,	-- A line (CHR(10)) delimited string of results.  Use introspectResourcesResultCursor() to  return a cursor.
		OUT numResourcesIntrospectAdd		INTEGER,		-- Number of resources added during introspection.  Includes catalogs and schemas in the count.
		OUT numTablesIntrospectAdd			INTEGER,		-- Number of tables added during introspection.  Only tables are counted.
		OUT tablesIntrospectAdd				LONGVARCHAR,	-- List of tables added during introspection.  Excludes catalogs and schemas.
		OUT numResourcesIntrospectSkip		INTEGER,		-- Number of resources skipped during introspection.  Includes catalogs and schemas in the count.
		OUT numTablesIntrospectSkip			INTEGER,		-- Number of tables skipped during introspection.  Only tables are counted.
		OUT tablesIntrospectSkip			LONGVARCHAR,	-- List of tables skipped during introspection.  Excludes catalogs and schemas.
		-- createSourceViews Variables:
		OUT numTotalViews					INTEGER,		-- Total number of source views created
		OUT numTotalColumns					INTEGER			-- Total number of columns created with the source views
	
	Modified Date:	Modified By:		DV Version:		Reason:
	01/23/2019		Mike Tinius			8.0.0			Created new to create and introspect the datasource and generate the source views.
*/
PROCEDURE createDatasourceIntrospectGenerate(
	IN  debug						CHAR(1),		-- Y=debug on.  N=debug off
	/**************************************
	 * createDatasourceIntrospect Variables:
	 *************************************/
	IN  destroyDatasource			CHAR(1),		-- Y=destroy datasource if exists,   N=do not destroy if exists
	IN  dataSourceFullPath			VARCHAR(4000),	-- The full DV path to the datasource where it will be created.  ex. &apos;/shared/PWC_template_flipped/04_DataSource/DS_ORDERS&apos;
	IN  dataSourceType 				VARCHAR,		-- The type of data source.  This is very specific.  Hive=&apos;Hive2&apos;.  Postgres=&apos;PostgreSQL 9.1&apos;
	IN  catalogName					VARCHAR,		-- optional (null) - Database catalog Name if applicable
	IN  schemaName					VARCHAR,		-- mandatory.  Database schema name
	IN  tableNames					LONGVARCHAR,	-- optional.  NULL=no specified table list OR one or more comma separated tables to introspect.  When NULL, all tables for the schema are introspected.
	IN  procedureNames				LONGVARCHAR,	-- NULL=no specified procedure list OR 1 or more comma separated procedures to introspect.  When NULL, all procedures are introspected.
	IN  urlIP						VARCHAR,		-- This is the datasource hostname or ip address.  ex. &apos;localhost&apos;
	IN  urlDatabaseName				VARCHAR,		-- This is the datasource database name.  ex. &apos;orders&apos;
	IN  urlPort						INTEGER,		-- This is the datasource port number.  ex. 9808
	IN  login						VARCHAR,		-- This is the datasource login.  ex. &apos;tutorial&apos;
	IN  password					VARCHAR,		-- This is the datasource password.  ex. &apos;Encrypted:ENC(iCJKSlfNUeHFVHAVtShr7A==$PLtM6oLQLR3smjq4jn1hJg==)&apos;

	/**************************************
	 * createSourceViews Variables:
	 *************************************/
	IN generateToFolder				LONGVARCHAR,
		-- This is the full path to the folder in which to generate the views
		-- This is only required if option 1: sourceResource is provided.
	IN generateMode					CHAR(1),		-- Default this to G
		-- Determines whether to retrieve names from the Common_Model_v2_file[1-3].xls spreadsheets or generate them and
		--   is only meaninfful when generateLogicalNames=1
	 	-- G=Generate the resource names 
		--   use &apos;G&apos; in conjunctionwith layerType=&apos;PM&apos; to generate the physical metadata names to the spreadsheet.
		--   This would be the strategy for initializing the Common_Model_v2_file[1-3].xls spreadsheet.  
		--   It is often useful to set the caseRule parameter to establish the type of logical names that you want to start with.
		-- R=Retrieve the resource name from a spreadsheet. (resources include PATH names, VIEW names AND COLUMN names)
		--   use &apos;R&apos; in conjunction with layerType=&apos;FV&apos;	 
	IN overwrite					INTEGER,	
		-- allows user to decide whether they want to overwrite an existing view or not.
		-- 0=&quot;FAIL_IF_EXISTS&quot;=do not overwrite the resource.  If the resource exists, raise an exception.
		-- 1=&quot;SKIP_IF_EXISTS&quot;=skip the resource if it exists and continue processing
		-- 2 (default)=&quot;OVERWRITE_IF_EXISTS&quot;=do overwrite the resource if it exists.
	IN resourceCaseRule				CHAR(1), -- (used when generateMode=&apos;G&apos;) 
		--  TABLES only.  This resourceCaseRule is only used for tables.
		--	 Assumption:  The original table name has to have separators (_) for this to work properly.
		--			     If the original word has no separators then the case rule gets applied to the single word
    	-- 	j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
		-- 	C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
		-- 	T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
		-- 	U=UPPER_CASE - All word parts are UPPER case with separtors retained
		-- 	l=lower_case - All word parts are lower case with separators retained
		-- 	O=Original_case - The word is not changed at all -- just pass it through as is
	IN columnCaseRule				CHAR(1), -- (used when generateMode=&apos;G&apos;) 
		--  COLUMNS only.  This caseRule is only used for columns.
		--	 Assumption:  The original column name has to have separators (_) for this to work properly.
		--			     If the original word has no separators then the case rule gets applied to the single word
		--	j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
		--	C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
		--	T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
		--	U=UPPER_CASE - All word parts are UPPER case with separtors retained
		--	l=lower_case - All word parts are lower case with separators retained
		--	O=Original_case - The word is not changed at all -- just pass it through as is
	IN resourcePrefix 				VARCHAR, --(used when generateMode=&apos;G&apos;)
		--  Any set of characters used to prefix a table or procedure name.  Include underscores with the suffix if applicable.
		--	Example: V_ MY_TABLE or V_MY_TABLE 	
	IN resourceSuffix 				VARCHAR, --(used when generateMode=&apos;G&apos;)
		--  Any set of characters used to suffix a table or procedure name.  Include underscores with the suffix if applicable.
		--	Example: _APP MY_TABLE or MY_TABLE_APP 	
	IN newColumnList				LONGVARCHAR, --(used when generateMode=&apos;G&apos;)
		-- A formatted list of new columns to add to the end of the view.  The column will not be added if it already exists.
		-- The format is as follows:  column1&amp;&amp;type1&amp;&amp;value1//column2&amp;&amp;type2&amp;&amp;value2//column3&amp;&amp;type3&amp;&amp;value3
	IN generateCast 				SMALLINT,		-- This parameter allows the user to control whether to generate the cast statement around the generated
		--	   column or not.  It uses the column type from the source view.
		--	0=Do not generate CAST statement.  Pass through column as is.  Default behavior.
		-- 	1=Generate the CAST statement around the column
		--	2-Generate the CAST statement around the non-index columns only (No CAST on index columns)
		--	3-Generate the CAST statement around the non-index columns only and generate a &quot;display&quot; CAST column for each index column.  (No CAST o nindex columns)
		--	4-Generate the CAST statement around the non-index columns and non-primary key index columns only (No CAST on primary key index columns)
		--	5-Generate the CAST statement around the non-index columns and non-primary key index columns only and generate a &quot;display&quot; CAST column for each primary key index column.  (No CAST on primary key index columns)
	IN generateIndexes 				SMALLINT,		--	generateIndexes - This parameter allows the user to control whether to generate indexes on the target views as derived from the underlying resources
		--	0=[default] Do not generate indexes
		-- 	1=Generate indexes

	-- createDatasourceIntrospect Output Variables:
	OUT success1						BIT,			-- 0=fail, 1=success.
	OUT createDataSourceResponse		XML,			-- How the datasource was configured.
	OUT faultResponse					XML,			-- If not null then there was an error.
	OUT errStatus 						VARCHAR,		-- SUCCESS OR FAIL
	OUT errMessage 						LONGVARCHAR,	-- Error message if errStatus=FAIL
	OUT introspectionResult 			LONGVARCHAR,	-- A line (CHR(10)) delimited string of results.  Use introspectResourcesResultCursor() to  return a cursor.
	OUT numResourcesIntrospectAdd		INTEGER,		-- Number of resources added during introspection.  Includes catalogs and schemas in the count.
	OUT numTablesIntrospectAdd			INTEGER,		-- Number of tables added during introspection.  Only tables are counted.
	OUT tablesIntrospectAdd				LONGVARCHAR,	-- List of tables added during introspection.  Excludes catalogs and schemas.
	OUT numResourcesIntrospectSkip		INTEGER,		-- Number of resources skipped during introspection.  Includes catalogs and schemas in the count.
	OUT numTablesIntrospectSkip			INTEGER,		-- Number of tables skipped during introspection.  Only tables are counted.
	OUT tablesIntrospectSkip			LONGVARCHAR,	-- List of tables skipped during introspection.  Excludes catalogs and schemas.
	-- createSourceViews Variables:
	OUT numTotalViews					INTEGER,		-- Total number of source views created
	OUT numTotalColumns					INTEGER			-- Total number of columns created with the source views
)
BEGIN
	DECLARE moduleName					VARCHAR			DEFAULT &apos;createDatasourceIntrospectGenerate&apos;;
 
	/**************************************
	 * createSourceViews Variables:
	 *************************************/
    DECLARE generateViews				SMALLINT 		DEFAULT 1;
 		-- 0=Do not generate - (browse only) print out what will happen but don&apos;t perform the generation.
		-- 1=Do generate [DEFAULT] - Perform the VIEW Generation with a column projection.
		-- 2=Do generate           - Perform the VIEW Generation with a select * projection.
	DECLARE sourceResource				LONGVARCHAR		DEFAULT dataSourceFullPath;
 		-- The source folder in CIS to begin searching for views to publish to a Composite data source
		-- or the full path to a specific source View or Procedure to generate to the folder &quot;publishToFolder&quot;
		-- If this is set it supercedes the parameters set for layerType, groupIds and derivedFilterPath
     DECLARE generateWithSourceColumn 	SMALLINT DEFAULT 0;-- (used when generateMode=&apos;R&apos;)
		-- 0=Do NOT generate the view with the source column (no pass through)-logical status is DROPPED
    	-- 1=Generate the view with the source column (pass through)-logical status is UNCHANGED
		-- This is useful when you don&apos;t want to generate certain physical metadata columns into the Formatting layer.
		--   Therefore, if the physical has no definition in the Common_Model_v2_file[1-3].xls spreadsheet and this parameter is set to 0,
		--   then do not generate the logical or physical source column.  The view gets generated without that columnn.
	DECLARE useAliasRule				SMALLINT		DEFAULT 0;		-- (used when generateMode=&apos;G&apos;)
    	-- 0=[default] DO NOT perform alias rule lookup at all.  Word Part is passed through (default is 0)
		-- 1=Use alias rule and MATCH CASE exactly
		-- 2=Use alias rule and DO NOT MATCH CASE
		-- The &quot;AliasNameRuleSet()&quot; procedure is found in the folder /shared/&lt;project-folder&gt;/_scripts/Configure.
	DECLARE generateUnsupportedColumnType BIT			DEFAULT 0;
		-- flag indicating whether to ignore or generate unsupported column types.  For example in Oracle an SDO spatial type gets imported into Composite as &apos;OTHER&apos;.
		-- 0/null (default) - ignore column type = &apos;OTHER&apos; and do not generate that column
		-- 1 - generate columns where the column type = &apos;OTHER&apos;
	DECLARE exactMatch					BIT				DEFAULT 1;
		-- specifies how the source resource will be matched against the resource being interrogated
		-- 0=fuzzy match - sourcePath + derivedFilterPath must simply be contained within resourcePath
		-- 1 (default)=exact match - sourcePath + derivedFilterPath must match exactly in resourcePath
	DECLARE derivedFilterPath			LONGVARCHAR		DEFAULT null; 
		-- The path is derived by concatenating the partial filter path with the source path either from the sourceResource or of the designated layer type and groupId.
		-- The layerType and the groupId are used to filter the rows from the configureStartingFolders.  The source path is
		--    defined in configureStartingFolders per the layerType and groupId combination.
		--   e.g. layerType=CP and sourceFolderPath=/shared/BestPractices/DataAbstractionAbstractionSample/Application/Views
		--        The derivedFilterPath list=&quot;Orders_Closed,/Orders/Customers,Orders/Product&quot;
		--        Even though there are several other views in the /Orders folder under the /Application/Views only the ones specified
		--	      will be generated to the Application/Published.  Views directly under the source path do not require any qualifying path except the view name.
		--        Lastly, a leading &apos;/&apos; is not required but may be present if desired.
		-- If null, generate views from all source folders as directed by the sourceResource or &quot;configure starting folders&quot; and the designated layer type.
	DECLARE excludeDsPathsList			LONGVARCHAR		DEFAULT null;
		-- comma separated list of resource paths or partials paths to exclude.  This may be useful when a data source has been moved and it&apos;s index or foreign keys
		--	are pointing to another data source that does not exist anymore.  It may be necessary to exclude that path or paths.  If an exception is thrown during 
		--	execution, try excluding those paths.
		--	Values: /shared/MyPath/Physical/Metadata/MyDatasource

	-- Initialize variables
	SET numTotalViews = 0;
	SET numTotalColumns = 0;
	SET derivedFilterPath = tableNames;
	IF (procedureNames IS NOT NULL AND LENGTH(TRIM(procedureNames)) &gt; 0) THEN
		IF (derivedFilterPath IS NULL OR LENGTH(TRIM(procedureNames)) = 0) THEN
			SET derivedFilterPath = procedureNames;
		ELSE
			SET derivedFilterPath = derivedFilterPath || &apos;,&apos; || procedureNames;
		END IF;
	END IF;

	-- Construct the sourceResource Path [Datasource + catalogName + schemaName] used to generate the source views
	IF (catalogName IS NOT NULL AND LENGTH(TRIM(catalogName)) &gt; 0) THEN
		SET sourceResource = sourceResource || &apos;/&apos; || catalogName;
	END IF;
	IF (schemaName IS NOT NULL AND LENGTH(TRIM(schemaName)) &gt; 0) THEN
		SET sourceResource = sourceResource || &apos;/&apos; || schemaName;
	END IF;

 	-- 1. Create and Introspect the Datasource
	IF (UPPER(debug) = &apos;Y&apos;) THEN
		call print(&apos;&apos;);
		call print(moduleName||&apos; : --------------------------------------------------------------------------------------&apos;);
		call print(moduleName||&apos; : 1. Create and Introspect the Datasource.&apos;);
		call print(moduleName||&apos; : --------------------------------------------------------------------------------------&apos;);
	END IF;
	BEGIN INDEPENDENT TRANSACTION
		CALL /shared/Common/GenerateViews/helpers/createDatasourceIntrospect(
			debug						,	-- Y=debug on.  N=debug off
			destroyDatasource			,	-- Y=destroy datasource if exists,   N=do not destroy if exists
			dataSourceFullPath			,	-- The full DV path to the datasource where it will be created. 
			dataSourceType				,	-- The type of data source.  This is very specific.  Hive=&apos;Hive2&apos;.  Postgres=&apos;PostgreSQL 9.1&apos;
			catalogName					,	-- optional (null) - Database catalog Name if applicable
			schemaName					,	-- mandatory.  Database schema name
			tableNames					,	-- optional.  NULL=no specified table list OR one or more comma separated tables to introspect.  When NULL, all tables for the schema are introspected.
			procedureNames				,	-- NULL=no specified procedure list OR 1 or more comma separated procedures to introspect.  When NULL, all procedures are introspected.
			urlIP						,	-- This is the datasource hostname or ip address.  ex. &apos;localhost&apos;
			urlDatabaseName				,	-- This is the datasource database name.  ex. &apos;orders&apos;
			urlPort						,	-- This is the datasource port number.  ex. 9808
			login						,	-- This is the datasource login.  ex. &apos;tutorial&apos;
			password					,	-- This is the datasource password.
			success1					,	-- 0=fail, 1=success.
			createDataSourceResponse	,	-- How the datasource was configured.
			faultResponse				,	-- If not null then there was an error.
			errStatus 					,	-- SUCCESS OR FAIL
			errMessage 					,	-- Error message if errStatus=FAIL
			introspectionResult 		,	-- A line (CHR(10)) delimited string of results.  Use introspectResourcesResultCursor() to  return a cursor.
			numResourcesIntrospectAdd	,	-- Number of resources added during introspection.  Includes catalogs and schemas in the count.
			numTablesIntrospectAdd		,	-- Number of tables added during introspection.  Only tables are counted.
			tablesIntrospectAdd			,	-- List of tables added during introspection.  Excludes catalogs and schemas.
			numResourcesIntrospectSkip	,	-- Number of resources skipped during introspection.  Includes catalogs and schemas in the count.
			numTablesIntrospectSkip		,	-- Number of tables skipped during introspection.  Only tables are counted.
			tablesIntrospectSkip			-- List of tables skipped during introspection.  Excludes catalogs and schemas.
		);
	END;

	-- 2. Generate the source views based on the mapping table	
	IF (UPPER(debug) = &apos;Y&apos;) THEN
		call print(&apos;&apos;);
		call print(moduleName||&apos; : --------------------------------------------------------------------------------------&apos;);
		call print(moduleName||&apos; : 3. Generate the source views based on the mapping table.&apos;);
		call print(moduleName||&apos; : --------------------------------------------------------------------------------------&apos;);
	END IF;
	BEGIN INDEPENDENT TRANSACTION
		FOR r AS SELECT * FROM /shared/Common/GenerateViews/helpers/createSourceViews(
			debug,
			overwrite,	
				-- allows user to decide whether they want to overwrite an existing view or not.
				-- 0=&quot;FAIL_IF_EXISTS&quot;=do not overwrite the resource.  If the resource exists, raise an exception.
				-- 1=&quot;SKIP_IF_EXISTS&quot;=skip the resource if it exists and continue processing
				-- 2 (default)=&quot;OVERWRITE_IF_EXISTS&quot;=do overwrite the resource if it exists.
			derivedFilterPath, 
				-- The path is derived by concatenating the partial filter path with the source path either from the sourceResource or of the designated layer type and groupId.
				-- The layerType and the groupId are used to filter the rows from the configureStartingFolders.  The source path is
				--    defined in configureStartingFolders per the layerType and groupId combination.
				--   e.g. layerType=CP and sourceFolderPath=/shared/BestPractices/DataAbstractionAbstractionSample/Application/Views
				--        The derivedFilterPath list=&quot;Orders_Closed,/Orders/Customers,Orders/Product&quot;
				--        Even though there are several other views in the /Orders folder under the /Application/Views only the ones specified
				--	      will be generated to the Application/Published.  Views directly under the source path do not require any qualifying path except the view name.
				--        Lastly, a leading &apos;/&apos; is not required but may be present if desired.
				-- If null, generate views from all source folders as directed by the sourceResource or &quot;configure starting folders&quot; and the designated layer type.
			excludeDsPathsList,
				-- comma separated list of resource paths or partials paths to exclude.  This may be useful when a data source has been moved and it&apos;s index or foreign keys
				--	are pointing to another data source that does not exist anymore.  It may be necessary to exclude that path or paths.  If an exception is thrown during 
				--	execution, try excluding those paths.
				--	Values: /shared/MyPath/Physical/Metadata/MyDatasource
			
			-- OPTION 1 - generate views is controlled by explicit folder settings for a source resource and the folder to generate views to.
			-- 			  Use sourceResource and generateToFolder explicitly.   If blank then use layerType, groupIds and derivedFilterPath.
			sourceResource,
				-- The source folder in CIS to begin searching for views to generate CRUD procedures from
				-- If this is set it supercedes the parameters set for layerType, groupIds and derivedFilterPath
			generateToFolder,
				-- This is the full path to the folder in which to generate the views
				-- This is only required if option 1: sourceResource is provided.
		
			-- Additional parameters
			generateMode,
				-- G=Generate the resource names 
				-- R=Retrieve the resource name from a spreadsheet. (resources include PATH names, VIEW names AND COLUMN names)
			generateViews,
				-- 0=Do not generate - (browse only) print out what will happen but don&apos;t perform the generation.
				-- 1=Do generate [DEFAULT] - Perform the VIEW Generation with a column projection.
				-- 2=Do generate           - Perform the VIEW Generation with a select * projection.
			resourceCaseRule, -- (used when generateMode=&apos;G&apos;) 
				--  TABLES only.  This resourceCaseRule is only used for tables.
				--	 Assumption:  The original table name has to have separators (_) for this to work properly.
				--			     If the original word has no separators then the case rule gets applied to the single word
				-- 	j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
				-- 	C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
				-- 	T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
				-- 	U=UPPER_CASE - All word parts are UPPER case with separtors retained
				-- 	l=lower_case - All word parts are lower case with separators retained
				-- 	O=Original_case - The word is not changed at all -- just pass it through as is
			columnCaseRule, -- (used when generateMode=&apos;G&apos;) 
				--  COLUMNS only.  This caseRule is only used for columns.
				--	 Assumption:  The original column name has to have separators (_) for this to work properly.
				--			     If the original word has no separators then the case rule gets applied to the single word
				--	j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
				--	C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
				--	T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
				--	U=UPPER_CASE - All word parts are UPPER case with separtors retained
				--	l=lower_case - All word parts are lower case with separators retained
				--	O=Original_case - The word is not changed at all -- just pass it through as is
			useAliasRule,	-- (used when generateMode=&apos;G&apos;)
				-- 0=DO NOT perform alias rule lookup at all.  Word Part is passed through
				-- 1=Use alias rule and MATCH CASE exactly
				-- 2=Use alias rule and DO NOT MATCH CASE
			resourcePrefix, --(used when generateMode=&apos;G&apos;)
				--  Any set of characters used to prefix a table or procedure name.  Include underscores with the suffix if applicable.
				--	Example: V_ MY_TABLE or V_MY_TABLE 	
			resourceSuffix, --(used when generateMode=&apos;G&apos;)
				--  Any set of characters used to suffix a table or procedure name.  Include underscores with the suffix if applicable.
				--	Example: _APP MY_TABLE or MY_TABLE_APP 	
			newColumnList, --(used when generateMode=&apos;G&apos;)
				-- A formatted list of new columns to add to the end of the view.  The column will not be added if it already exists.
				-- The format is as follows:  column1&amp;&amp;type1&amp;&amp;value1//column2&amp;&amp;type2&amp;&amp;value2//column3&amp;&amp;type3&amp;&amp;value3
			generateWithSourceColumn,-- (used when generateMode=&apos;R&apos;)
				-- 0=Do NOT generate the view with the source column (no pass through)-Column status is DROPPED
				-- 1=[default] Generate the view with the source column (pass through)-Column status is UNCHANGED
			generateCast,-- (used when generateMode=&apos;G&apos; or &apos;R&apos;)
				-- 	This parameter allows the user to control whether to generate the cast statement around the generated
				--	   column or not.  It uses the column type from the source view.
				--	0=Do not generate CAST statement.  Pass through column as is.  Default behavior.
				-- 	1=Generate the CAST statement around the column
				--	2-Generate the CAST statement around the non-index columns only (No CAST on index columns)
				--	3-Generate the CAST statement around the non-index columns only and generate a &quot;display&quot; CAST column for each index column.  (No CAST o nindex columns)
				--	4-Generate the CAST statement around the non-index columns and non-primary key index columns only (No CAST on primary key index columns)
				--	5-Generate the CAST statement around the non-index columns and non-primary key index columns only and generate a &quot;display&quot; CAST column for each primary key index column.  (No CAST on primary key index columns)
			generateIndexes,
				--	generateIndexes - This parameter allows the user to control whether to generate indexes on the target views as derived from the underlying resources
				--	0=[default] Do not generate indexes
				-- 	1=Generate indexes
			generateUnsupportedColumnType
				-- flag indicating whether to ignore or generate unsupported column types.  For example in Oracle an SDO spatial type gets imported into Composite as &apos;OTHER&apos;.
				-- 0/null (default) - ignore column type = &apos;OTHER&apos; and do not generate that column
				-- 1 - generate columns where the column type = &apos;OTHER&apos;
			)
		DO
			IF (r.containerType IS NOT NULL AND LENGTH(TRIM(r.containerType)) &gt; 0) THEN
				IF (r.containerType = &apos;TABLE&apos;) THEN
					SET numTotalViews = numTotalViews + 1;
					IF (UPPER(debug) = &apos;Y&apos;) THEN
						call print(&apos;&apos;);
						call print(moduleName||&apos; : TABLE:  Physical Name=&apos;||NVL(r.columnName,&apos;null&apos;)||&apos; --&gt; Logical Name=&apos;||NVL(r.logicalColumnName,&apos;null&apos;));
					END IF;
				ELSE
					IF (UPPER(debug) = &apos;Y&apos;) THEN
						call print(moduleName||&apos; :     COLUMN: Pysical Name=&apos;||NVL(r.columnName,&apos;null&apos;)||&apos; --&gt; Logical Name=&apos;||NVL(r.logicalColumnName,&apos;null&apos;));
					END IF;
					SET numTotalColumns = numTotalColumns + 1;
				END IF;
			ELSEIF (r.logicalColumnType IS NOT NULL AND LENGTH(TRIM(r.logicalColumnType)) &gt; 0 AND r.logicalColumnType &lt;&gt; &apos;TABLE&apos;) THEN
 					IF (UPPER(debug) = &apos;Y&apos;) THEN
						call print(moduleName||&apos; :     COLUMN: physical Name=&apos;||NVL(r.columnName,&apos;null&apos;)||&apos; --&gt; Logical Name=&apos;||NVL(r.logicalColumnName,&apos;null&apos;));
					END IF;
					SET numTotalColumns = numTotalColumns + 1;
			END IF;	
		END FOR;
	END;
END </attribute>
  <attribute name="creationDate" type="LONG">1548248299044</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">-1973</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1548449352023</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">-1973</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1548248299044</attribute>
</metadata>