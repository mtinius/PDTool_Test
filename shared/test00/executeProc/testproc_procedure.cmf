<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:bd3da03e-7092-4d4d-a56f-6758ec91bc45 -->
<metadata name="testproc" path="/shared/test00/executeProc/testproc" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <parameters>
    <parameter name="arg1Varchar" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="arg2Integer" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="arg3Decimal" direction="IN" nullable="true">
      <datatype name="DECIMAL" type="DECIMAL" maxDigits="32" maxFractionalDigits="2"/>
    </parameter>
    <parameter name="arg4Float" direction="IN" nullable="true">
      <datatype name="FLOAT" type="FLOAT" minValue="1.1754943508222875E-38" maxValue="3.4028234663852886E38"/>
    </parameter>
    <parameter name="arg5Date" direction="IN" nullable="true">
      <datatype name="DATE" type="DATE"/>
    </parameter>
    <parameter name="arg6Time" direction="IN" nullable="true">
      <datatype name="TIME" type="TIME"/>
    </parameter>
    <parameter name="arg7Timestamp" direction="IN" nullable="true">
      <datatype name="TIMESTAMP" type="DATETIME"/>
    </parameter>
    <parameter name="arg8XML" direction="IN" nullable="true">
      <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
        <schemaDatatype>
          <datatype name="XML" type="TREE" refId="1"></datatype>
        </schemaDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed</attribute>
    </parameter>
    <parameter name="arg9Boolean" direction="IN" nullable="true">
      <datatype name="TINYINT" type="INTEGER" minValue="-128" maxValue="127"/>
    </parameter>
    <parameter name="error" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="group1" domain="composite" privileges="READ WRITE EXECUTE"/>
    <privilege user="user1" domain="composite" privileges="READ EXECUTE"/>
    <privilege user="user2" domain="composite" privileges="READ EXECUTE"/>
  </security>
  <dependency target="/lib/debug/Log" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToLog" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="MessageValue" type="STRING" maxLength="64000"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">PROCEDURE testproc(
in arg1Varchar varchar, --&apos;name&apos;
in arg2Integer integer, --0
in arg3Decimal decimal, -- 12.3
in arg4Float float, -- 3.141592653589793
in arg5Date date, -- &apos;2000-02-01&apos;
in arg6Time time, -- &apos;23:59:01&apos;
in arg7Timestamp timestamp, -- &apos;1923-03-06 23:59:31&apos;
in arg8XML XML, -- &apos;&lt;node&gt;&lt;node1&gt;value&lt;/node1&gt;&lt;/node&gt;&apos;
in arg9Boolean tinyint, -- 1
out error varchar
)
BEGIN
DECLARE text varchar default arg1Varchar;
DECLARE CISEXCEPTION exception;

call /lib/debug/Log(&apos;***** testproc ***** Arguments:&apos;);
call /lib/debug/Log(&apos;arg1Varchar=[&apos;||arg1Varchar||&apos;]&apos;);
call /lib/debug/Log(&apos;arg2Integer[&apos;||cast(arg2Integer as varchar)||&apos;]&apos;);
call /lib/debug/Log(&apos;arg3Decimal=[&apos;||cast(arg3Decimal as varchar)||&apos;]&apos;);
call /lib/debug/Log(&apos;arg4Float=[&apos;||cast(arg4Float as varchar)||&apos;]&apos;);
call /lib/debug/Log(&apos;arg5Date=[&apos;||cast(arg5Date as varchar)||&apos;]&apos;);
call /lib/debug/Log(&apos;arg6Time=[&apos;||cast(arg6Time as varchar)||&apos;]&apos;);
call /lib/debug/Log(&apos;arg7Timestamp=[&apos;||cast(arg7Timestamp as varchar)||&apos;]&apos;);
call /lib/debug/Log(&apos;arg8XML=[&apos;||cast(arg8XML as varchar)||&apos;]&apos;);
call /lib/debug/Log(&apos;arg9Boolean=[&apos;||cast(arg9Boolean as varchar)||&apos;]&apos;);

if (arg2Integer &lt; 2) then
	set error = null;
else
	if (arg1Varchar is null) then
		set error = &apos;error&apos;;
	else
		set error = text;
	end if;
end if;
if (error is not null) then
   call /lib/debug/Log(&apos;Throwing CISEXCEPTION&apos;);
   raise CISEXCEPTION value text;
end if;

call /lib/debug/Log(&apos;SUCCESS&apos;);

END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1392210706564</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:7:Customized" type="STRING">datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>